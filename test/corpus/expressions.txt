===========================================================================================
identifiers
===========================================================================================

foo
bar9
underscore_separated
héllø
_
_bar9
_héllø
@main

---

(module
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (meta)
)

===========================================================================================
comma_separated_single_line
===========================================================================================

foo, 'bar', 123

---

(module
  (expressions
    (identifier)
    (string)
    (number)
  )
)

===========================================================================================
tuple_empty
===========================================================================================

(,)

---

(module
  (tuple)
)

===========================================================================================
tuple_nested
===========================================================================================

(foo, bar, (baz))

---

(module
  (tuple
    (identifier)
    (identifier)
    (tuple
      (identifier))))

===========================================================================================
tuple_nested_multi_line
===========================================================================================

(
  foo,
  bar
, (baz)
)

---

(module
  (tuple
    (identifier)
    (identifier)
    (tuple
      (identifier))))


===========================================================================================
list_multi_line
===========================================================================================

[
  foo,
  bar
, (baz)
]

---

(module
  (list
    (identifier)
    (identifier)
    (tuple
      (identifier))))

===========================================================================================
binary_op
===========================================================================================

1 + 2 * 3 + 4

---

(module
  (binary_op
    (binary_op
      (number)
      (binary_op
        (number)
        (number)
      )
    )
    (number)
  )
)

===========================================================================================
binary_op_multi_line_post
===========================================================================================

1 +
  2 *
    3 +
  4

---

(module
  (binary_op
    (binary_op
      (number)
      (binary_op
        (number)
        (number)
      )
    )
    (number)
  )
)


===========================================================================================
assignment_single_line
===========================================================================================

a = 3
b += c = d

---

(module
  (assign
    (identifier)
    (number)
  )
  (modify_assign
    (identifier)
    (assign
      (identifier)
      (identifier)
    )
  )
)

===========================================================================================
assignment_multi_line
===========================================================================================

a =
  1, 2
foo = 1,
      2

---

(module
  (assign
    (identifier)
    (expressions
      (number)
      (number)
    )
  )
  (assign
    (identifier)
    (expressions
      (number)
      (number)
    )
  )
)

===========================================================================================
boolean_chain
===========================================================================================

true and foo and false

---

(module
  (boolean_op
    (boolean_op
      (true)
      (identifier)
    )
    (false)
  )
)

===========================================================================================
return_indented
===========================================================================================

return
  foo

---

(module
  (return (identifier))
)

===========================================================================================
yield_indented
===========================================================================================

yield
  foo

---

(module
  (yield (identifier))
)

===========================================================================================
export_identifier
===========================================================================================

export foo
export foo = 99

---

(module
  (export (identifier))
  (export
    (identifier)
    (number)
  )
)

===========================================================================================
export_map_inline
===========================================================================================

export { foo, bar }

---

(module
  (export
    (map
      (entry_inline key: (identifier))
      (entry_inline key: (identifier))
    )
  )
)

===========================================================================================
export_map_block
===========================================================================================

export
  foo: 42
  'bar': 99

---

(module
  (export
    (map_block
      (entry_block
        key: (identifier)
        value: (number)
      )
      (entry_block
        key: (string)
        value: (number)
      )
    )
  )
)

===========================================================================================
import
===========================================================================================

import foo
import foo as bar
from foo import 'bar'
from foo.bar import x, 'y'
from 'hello' import foo
from foo import bar as x, baz as y

---

(module
  (import
    (import_item (identifier))
  )
  (import
    (import_item (identifier) (identifier))
  )
  (import
    (import_module (identifier))
    (import_item (string))
  )
  (import
    (import_module (identifier) (identifier))
    (import_item (identifier))
    (import_item (string))
  )
  (import
    (import_module (string))
    (import_item (identifier))
  )
  (import
    (import_module (identifier))
    (import_item (identifier) (identifier))
    (import_item (identifier) (identifier))
  )
)

===========================================================================================
try_catch_with_finally
===========================================================================================

try
  throw foo()
catch error
  throw error
finally
  x = 42

---

(module
  (try
    (block
      (throw (chain start: (identifier) call: (tuple)))
    )
  )
  (catch
    (identifier)
    (block
      (throw (identifier))
    )
  )
  (finally (block
    (assign (identifier) (number))
  ))
)

===========================================================================================
try_catch_finally_in_function
===========================================================================================

x = ||
  try
    42
  catch _
    99
  finally
    123

---

(module
  (assign
    (identifier)
    (function
      body: (block
        (try (block (number)))
        (catch
          (identifier)
          (block (number))
        )
        (finally (block (number)))
      )
    )
  )
)

===========================================================================================
try_catch_no_finally
===========================================================================================

try
  foo()
catch e
  bar()

---

(module
  (try (block (chain start: (identifier) call: (tuple))))
  (catch
    (identifier)
    (block
      (chain start: (identifier) call: (tuple))
    )
  )
)

===========================================================================================
try_catch_followed_by_expression
===========================================================================================

try
  123
catch error
  456
'hello'

---

(module
  (try (block (number)))
  (catch (identifier) (block (number)))
  (string)
)

